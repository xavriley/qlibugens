on:
  workflow_dispatch:
  push:
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  build:

    runs-on: ${{matrix.os}}
    strategy:
      fail-fast: false
      matrix:
        include:
          - { title: "Linux", os: "ubuntu-18.04", cc: "clang", arch: "x64", build_type: "Release" }
          - { title: "Windows", os: "windows-latest", cc: "vs2019", arch: "x64", build_type: "Release" }
          - { title: "Mac", os: "macos-latest", cc: "clang", arch: "x64", build_type: "Release" }
    env:
      SC_SRC_PATH: ${{ github.workspace }}/supercollider
      BUILD_PATH: ${{ github.workspace }}/build
      INSTALL_PATH: ${{ github.workspace }}/build/install

    steps:
    - uses: actions/checkout@v2

    - name: set filename # use tag or sha for version
      id: set-filename
      shell: bash
      run: |
        if [[ "$GITHUB_REF" == refs/tags/* ]]; then
        FULL_TAG=${GITHUB_REF#refs/tags/}
        VERSION=${FULL_TAG##Version-}
        else
        VERSION=$GITHUB_SHA
        fi
        echo "::set-output name=filename::QlibUGens-$VERSION-${{ matrix.os }}"

    - name: Install 7Zip (Windows)
      if: matrix.os == 'windows-latest'
      shell: powershell
      run: Install-Module 7Zip4PowerShell -Force -Verbose

    - name: Get SC source code
      run: git clone https://github.com/supercollider/supercollider.git ${{github.workspace}}/supercollider

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{github.workspace}}/build

    - name: Configure CMake (Unix)
      shell: bash
      if: matrix.os != 'windows-latest'
      working-directory: ${{github.workspace}}/build
      run: cmake .. -DCMAKE_BUILD_TYPE='Release' -DSC_PATH=${{github.workspace}}/supercollider -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/build/install

    - name: Configure CMake (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      working-directory: ${{github.workspace}}\build
      run: cmake .. -DCMAKE_BUILD_TYPE='Release' -DSC_PATH=${{github.workspace}}\supercollider -DCMAKE_INSTALL_PREFIX=${{github.workspace}}\build\install

    - name: Prebuild (Unix)
      working-directory: ${{github.workspace}}/build
      env:
        CC: ${{ matrix.cc }}
      run: |
        sudo apt install -y pulseaudio dbus-x11 libssl-dev supercollider-server sc3-plugins-server alsa-base alsa-utils jackd2 libjack-jackd2-dev libjack-jackd2-0 libasound2-dev librtmidi-dev pulseaudio-module-jack
      if: matrix.os == 'ubuntu-18.04'

    - name: Build (Unix)
      if: matrix.os != 'windows-latest'
      working-directory: ${{github.workspace}}/build
      shell: bash
      run: sudo cmake --build . --config "Release" --target install

    - name: Build (Windows)
      working-directory: ${{github.workspace}}\build
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: cmake --build . --config "Release" --target install

      # Gather all files in a zip
    - name: Zip up build (Unix)
      if: matrix.os != 'windows-latest'
      shell: bash
      working-directory: ${{github.workspace}}/build
      run: zip -r ${{ steps.set-filename.outputs.filename }}.zip install/QlibUGens
      
      # Gather all files in a zip
    - name: Zip up build (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      working-directory: ${{github.workspace}}\build
      run: Compress-7Zip "install\QlibUGens" -ArchiveFileName "${{ steps.set-filename.outputs.filename }}.zip" -Format Zip

    - name: upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: ${{ steps.set-filename.outputs.filename }}
        path: ${{ env.BUILD_PATH }}/${{ steps.set-filename.outputs.filename }}.zip

    - name: Check if release has been created
      uses: mukunku/tag-exists-action@v1.0.0
      id: checkTag
      with: 
        tag: 'v1'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # Publish build
    - name: Create Release
      if: steps.checkTag.outputs.exists == false
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ github.ref }}
        release_name: BitstreamAutocorrelation-${{ github.ref }}
        draft: false
        prerelease: false
          
    - name: Upload binaries to release
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ${{ env.BUILD_PATH }}/${{ steps.set-filename.outputs.filename }}.zip
        asset_name: ${{ steps.set-filename.outputs.filename }}.zip
        tag: ${{ github.ref }}
